<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="/theme/custom.css"?>
<svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg">
    <title>Into Iterator Step Diagram</title>
    <desc>
        Diagram illustrating the 'into_iter' step:
        - Shows an input stream of elements A, B, C.
        - The 'into_iter' step consumes the walker.
        - The output is a standard Rust iterator yielding the IDs of A, B, C.
        - Indicates that the walker chain is terminated.
        - The legend explains the symbols.
    </desc>
    <defs>
        <!-- Marker Definitions -->
        <marker id="arrowhead" class="marker-arrowhead marker-base" markerWidth="8" markerHeight="6"
                refX="7" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L8,3 L0,6 Z"/>
        </marker>
        <marker id="arrowhead-pointer" class="marker-arrowhead-pointer marker-base" markerWidth="8" markerHeight="6"
                refX="7" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L8,3 L0,6 Z"/>
        </marker>
    </defs>

    <!-- Input Stream -->
    <text class="step-label" x="100" y="40" text-anchor="middle">Input Elements</text>
    <line class="edge directed" x1="30" y1="100" x2="250" y2="100" marker-end="url(#arrowhead)"/>

    <!-- Input Elements -->
    <g transform="translate(-20, 0)">
        <g class="node highlighted" transform="translate(80, 100)">
            <circle r="15"></circle>
            <text class="node-label">A</text>
        </g>
        <g class="node highlighted" transform="translate(140, 100)">
            <circle r="15"></circle>
            <text class="node-label">B</text>
        </g>
        <g class="node highlighted" transform="translate(200, 100)">
            <circle r="15"></circle>
            <text class="node-label">C</text>
        </g>
    </g>

    <!-- Into Iterator Step Box -->
    <g transform="translate(-20, 0)">
        <rect x="250" y="75" width="100" height="50" rx="5" ry="5"
              fill="var(--accent-primary)" stroke="var(--node-stroke)" stroke-width="var(--stroke-width-normal)"/>
        <text class="step-label" x="300" y="105" text-anchor="middle" fill="var(--text-color-light)">into_iter</text>
    </g>
    <!-- Output: Rust Iterator -->
    <g transform="translate(425, 100)">
        <rect x="-75" y="-25" width="230" height="50" rx="5" ry="5"
              fill="var(--accent-secondary)" fill-opacity="0.15"
              stroke="var(--accent-secondary)" stroke-width="1.5"/>
        <text x="30" y="-5" text-anchor="middle" font-weight="bold" fill="var(--accent-secondary)">Rust Iterator</text>
        <text x="40" y="15" text-anchor="middle" font-family="monospace" fill="var(--accent-secondary)">
            Item = ID(A), ID(B), ID(C)
        </text>
    </g>
    <!-- Arrow from step to iterator -->
    <line class="edge directed" x1="330" y1="100" x2="350" y2="100" marker-end="url(#arrowhead)"/>

    <!-- Termination Note -->
    <text x="280" y="155" class="text-color-muted" font-size="12px" text-anchor="middle">Terminates Walker</text>
    <line class="index-pointer" x1="280" y1="125" x2="280" y2="140" marker-end="url(#arrowhead-pointer)"/>


    <!-- Legend -->
    <g transform="translate(0, 200)">
        <rect class="index-box" x="25" y="0" width="550" height="80"/>
        <text class="index-title" x="300" y="20">Legend</text>

        <g transform="translate(60, 45)">
            <g class="node highlighted">
                <circle r="10"></circle>
            </g>
            <text x="20" y="0" dominant-baseline="middle" font-size="var(--font-size-small)">
                Element in traversal (e.g., A)
            </text>
        </g>

        <g transform="translate(320, 45)">
            <rect x="-10" y="-5" width="20" height="10" fill="var(--accent-secondary)" fill-opacity="0.15"
                  stroke="var(--accent-secondary)" rx="2"/>
            <text x="20" y="0" dominant-baseline="middle" font-size="var(--font-size-small)">
                Resulting Rust Iterator (yielding IDs)
            </text>
        </g>
    </g>
</svg>
