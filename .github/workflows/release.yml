name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:

  # Release unpublished packages.
  release-plz-release:
    if: ${{ github.repository_owner == 'bryncooke' }}
    name: Release-plz release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Create a PR with the new versions and changelog, preparing the next release.
  release-plz-pr:
    if: ${{ github.repository_owner == 'bryncooke' }}
    name: Release-plz PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Setup just
        uses: extractions/setup-just@v3
      - name: Update book
        env:
          PRS: ${{ steps.release-plz.outputs.prs }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          set -e
          
          # Process each PR branch
          echo "$PRS" | jq -c '.[]' | while read -r pr; do
            head_branch=$(echo "$pr" | jq -r '.head_branch')
            echo "Checking out branch: $head_branch"
            git fetch origin "$head_branch"
            git checkout "$head_branch"
          
            # Update book versions and build book
            just update-book-versions
            just book
          
            # Commit and push changes to the PR branch
            git add graph-api-book/
            git commit -m "chore: Update book for release" || echo "No changes to commit"
            git push origin "$head_branch"
          done

